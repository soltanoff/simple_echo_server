/* =====================================================================================================================
 * File: client.h
 * Description: Абстрактный класс клиента
 * Author: soltanoff
 * ================================================================================================================== */
#ifndef CLIENT_CLIENT_H
#define CLIENT_CLIENT_H
/* ================================================================================================================== */
#include "../config/config.h"
/* ================================================================================================================== */
class IClient {
public:
    IClient() = default;

    virtual ~IClient() = default;

    /*!
     * @public Метод закрывающий сокет клиента.
     * @return None
     * @note закрытие сокета с параметром SHUT_WR
     */
    virtual void close();

    /*!
     * @public Основной циклический метод класса.
     * @return 0 если работа завершилась без аварий, иначе -1
     * @note основной метод для взаимодействия с сервером
     */
    virtual void exec() = 0;
protected:
    //! @protected сокет открытого подключения
    SOCKET _socket;
    //! @protected структура конфигураций подключения сети
    sockaddr_in _service;

    /*!
     * @protected Метод осуществляющий привязку и прослушку сокета
     * @return true если открыть сокет получилось, иначе false
     */
    virtual bool prepareClient() = 0;

    /*!
     * @protected Метод обработки ответа от сервера
     * @param receivedBytes - количество полученных байт от сервера (out)
     * @param receivedBuf - массив данных, содержащий ответ от сервера (out)
     * @return true - данные получены успешно, инче false
     * @note осуществляет обработку полученного ответа сервера
     */
    virtual bool getAnswer(std::uint32_t &receivedBytes, char *receivedBuf) = 0;

    /*!
     * @protected Метод отправки данных на сервер
     * @param msg - массив данных отправляемых на сервер
     * @return true - данные отправленны успешно, иначе false
     * @note осуществляет отправку обработанных данных пользователя на сервер
     */
    virtual bool sendMessage(const char *msg) = 0;

    /*!
     * @protected Метод осуществляющий обработку введенных команд пользователя
     * @return None
     * @note осуществляет отправку обработанных данных пользователя на сервер
     */
    virtual void sendCommand();
};


#endif //CLIENT_CLIENT_H
